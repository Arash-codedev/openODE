var projects      = require(global.appRoot+'/js/projects.js');
var path          = require('path');
var mkdirp        = require('mkdirp');
var fs		      = require('fs');

function wrap_in_stars(content_array,header_array,use_numbersign)
{
	var max_len=0;
	header_array.forEach(function(array_item){
		max_len=Math.max(max_len,array_item.length);
	});
	var star_line=(use_numbersign?'###':'/**');
	for(var i=0;i<max_len;i++)
		star_line+=(use_numbersign?'#':'*');
	star_line+=(use_numbersign?'###':'**/');
	content_array.push(star_line);
	header_array.forEach(function(header){
		var new_line=(use_numbersign?'#  ':'/* ')+header;
		for(var j=0;j<max_len-header.length;j++)
			new_line+=' ';
		new_line+=(use_numbersign?'  #':' */');
		content_array.push(new_line);
	});
	content_array.push(star_line);
}

function render_files(project,built)
{
	built.files.forEach(function(file){
		if(file.is_json)
		{
			var final_content=file.content[0]; /* content is already stringified */
			var is_written=projects.write_file_txt(project.id,file.path,final_content,file.overwrite);
			file.is_written=is_written;
		}
		else
		{
			var final_content='';
			var final_content_lines=[];
			var starred_header=[];
			if(file.autogen_preamble)
			{
				starred_header.push('Warning: Autogenerated and subjected to change');
				starred_header.push(Date());
			}
			starred_header.push('Path: ./'+file.path);
			starred_header.push('Generator mark: '+file.generator_mark);
			var use_numbersign=(file.path=='CMakeLists.txt');
			if(file.path.endsWith('.sh')) // script
			{
				final_content_lines.push('#!/bin/bash');
				use_numbersign=true;
			}
			wrap_in_stars(final_content_lines,starred_header,use_numbersign);
			if(file.is_header)
			{
				final_content_lines.push('#pragma once');
				final_content_lines.push('');
			}
			file.includes_global.forEach(function(header){
				final_content_lines.push('#include <'+header+'>');
			});
			file.includes_local.forEach(function(header){
				final_content_lines.push('#include \"'+header+'\"');
			});
			if(file.includes_global.length || file.includes_local.length)
			{
				final_content_lines.push('');
			}
			file.includes_global.forEach(function(header){
				if(header=='string')
					final_content_lines.push('using std::string;');
				if(header=='vector')
					final_content_lines.push('using std::vector;');
				if(header=='array')
					final_content_lines.push('using std::array;');
				if(header=='cstddef')
					final_content_lines.push('using std::size_t;');
				if(header=='iostream')
				{
					final_content_lines.push('using std::cout;');
					final_content_lines.push('using std::endl;');
				}
				if(header=='stdexcept')
				{
					final_content_lines.push('using std::runtime_error;');
					final_content_lines.push('using std::exception;');
				}
			});
			if(file.includes_global.length)
			{
				final_content_lines.push('');
			}
			file.content.forEach(function(line){
				final_content_lines.push(line);
			});
			final_content_lines.push('');
			final_content_lines_compact=[];
			var repeat_nl=0;
			final_content_lines.forEach(function(line){/* removing extra empty lines */
				if(line=='')
					repeat_nl++;
				else
					repeat_nl=0;
				if(repeat_nl<=2)
					final_content_lines_compact.push(line);
			});
			final_content=final_content_lines_compact.join('\n');
			var is_written=projects.write_file_txt(project.id,file.path,final_content,file.overwrite);
			file.is_written=is_written;
		}
	});
}

function ensure_included(includes_list,include_item)
{
	if(includes_list.indexOf(include_item)<0)
		includes_list.push(include_item);
}

function transfer_libraries(project,built)
{
	var tlibs=[];
	var mg_config=require(path.join(global.module_group_path,'mg_config.js'));
	var available_features=projects.cmake_feature_list(path.join(mg_config.project_folder(),project.dirpath));
	for(var feature_id of project.data.build.cmake_features)
	{
		var feature=available_features[feature_id];
		if(feature && feature.transfer_libraries)
		{
			feature.transfer_libraries.forEach(function(lib_path){
				if(tlibs.indexOf(lib_path)<0)
				{
					tlibs.push(lib_path);
				}
			});
		}
	}
	tlibs.forEach(function(lib_path){
		var source='./assets/cpplibs/'+lib_path;
		var mg_config = require(path.join(global.module_group_path,'mg_config.js'));
		var proj_path=path.join(mg_config.project_folder(),project.dirpath);
		if(proj_path)
		{
			if(fs.existsSync(proj_path))
			{
				var destination=path.join(proj_path,'auto-coded/libs',lib_path);
				var file_dir=path.dirname(destination);
				mkdirp.sync(file_dir);
				var write_file=false;
				var source_content=fs.readFileSync(source,'utf8');
				if(!fs.existsSync(destination))
					write_file=true;
				else
				{
					var destination_content=fs.readFileSync(destination,'utf8');
					if(source_content!=destination_content)
						write_file=true;
				}
				if(write_file)
					fs.writeFileSync(destination,source_content);
			}
		}
	});
}

function remove_unwrittens(project,built)
{
	var mg_config = require(path.join(global.module_group_path,'mg_config.js'));
	var proj_path=path.join(mg_config.project_folder(),project.dirpath);
	var abs_path=path.join(proj_path,'log','unwritten');
	if(fs.existsSync(abs_path))
	{
		var rimraf = require('rimraf');
		rimraf.sync(abs_path);
	}
}

module.exports.ensure_included=ensure_included;
module.exports.render_files=render_files;
module.exports.transfer_libraries=transfer_libraries;
module.exports.remove_unwrittens=remove_unwrittens;

