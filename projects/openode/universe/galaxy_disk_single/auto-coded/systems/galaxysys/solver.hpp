/***************************************************/
/* Warning: Autogenerated and subjected to change  */
/* Thu Oct 18 2014 22:29:06 GMT+1100 (AEDT)        */
/* Path: ./auto-coded/systems/galaxysys/solver.hpp */
/* Generator mark: G68514641                       */
/***************************************************/
#pragma once

#include <limits>
#include <auto-coded/types/general_types.hpp>


class GalaxySys_solver
{
private:
	GalaxySys_manager &usersystem;
	static constexpr double epsilon=std::numeric_limits<double>::epsilon();
	static constexpr double m_eps_abs=1.0e-6;
	static constexpr double m_eps_rel=1.0e-8;
	static constexpr double m_a_x=1.0;
	static constexpr double m_a_dxdt=1.0;
	static constexpr double min_dt=1e-6;
	static constexpr double max_dt=0.01;
	const unsigned short stepper_order_value = 5;
	const unsigned short error_order_value = 4;
	Galaxy plant_m_dxdt;
	Galaxy plant_m_xerr;
	Galaxy plant_m_xnew;
	Galaxy plant_m_dxdtnew;
	bool plant_m_first_call;
	Galaxy plant_m_x_tmp;
	Galaxy plant_m_k2;
	Galaxy plant_m_k3;
	Galaxy plant_m_k4;
	Galaxy plant_m_k5;
	Galaxy plant_m_k6;

	bool less_with_sign(double t1,double t2,double dt);

	bool less_eq_with_sign(double t1,double t2,double dt);

	void plant_do_step(
			GalaxySys_manager &usersystem,
			Galaxy &plant_x,
			double &t,
			double &dt);

	void plant_do_step2(
		GalaxySys_manager &usersystem,
		const Galaxy &x_in,
		const Galaxy &dxdt_in,
		double t,
		Galaxy &x_out,
		Galaxy &dxdt_out,
		double &dt);

	double plant_error(const Galaxy &plant_x_old,const Galaxy &plant_dxdt_old,Galaxy &plant_x_err,double dt) const;

public:
	GalaxySys_solver(GalaxySys_manager &usersystem);

	std::size_t integrate(
			Galaxy &plant_start_state,
			double start_time,
			double end_time,
			double dt);

};
