/**************************************************/
/* Warning: Autogenerated and subjected to change */
/* Fri Oct 19 2014 10:28:43 GMT+1100 (AEDT)       */
/* Path: ./auto-coded/types/galaxy.cpp            */
/* Generator mark: G541654196                     */
/**************************************************/
#include <cstdlib>
#include <algorithm>
#include <auto-coded/types/galaxy.hpp>


Galaxy::Galaxy(Galaxy const& value):
		stars(value.stars)
{
	// constructor
}

void Galaxy::reset()
{
	for(int i=0;i<10000;i++)
		stars[i]={};
}

Galaxy Galaxy::operator= (Galaxy const& value)
{
	for(int i=0;i<10000;i++)
		this->stars[i]=value.stars[i]; /* G496846543 */
	return {*this};
}

Galaxy Galaxy::operator= (Galaxy&& value)
{
	for(int i=0;i<10000;i++)
		this->stars[i]=value.stars[i]; /* G496846543 */
	return {*this};
}

Galaxy Galaxy::abs() const
{
	Galaxy result;
	for(int i=0;i<10000;i++)
		result.stars[i]=this->stars[i].abs();/* G541686285 */
	return result;
}

double Galaxy::min() const
{
	double total_min=this->stars[0].min();
	for(int i=1;i<10000;i++)
		total_min=this->stars[i].min(); /* G165419684 */
	return total_min;
}

double Galaxy::max() const
{
	double total_max=this->stars[0].max();
	for(int i=1;i<10000;i++)
		total_max=this->stars[i].max(); /* G165419684 */
	return total_max;
}

Galaxy Galaxy::operator+= (const Galaxy &right)
{
	for(int i=0;i<10000;i++)
		this->stars[i]+=right.stars[i]; /* G486137661 */
	return {*this};
}

Galaxy Galaxy::operator+= (const double &value)
{
	for(int i=0;i<10000;i++)
		this->stars[i]+=value; /* G486137661 */
	return {*this};
}

Galaxy Galaxy::operator-= (const Galaxy &right)
{
	for(int i=0;i<10000;i++)
		this->stars[i]-=right.stars[i]; /* G486137661 */
	return {*this};
}

Galaxy Galaxy::operator*= (const Galaxy &right)
{
	for(int i=0;i<10000;i++)
		this->stars[i]*=right.stars[i]; /* G486137661 */
	return {*this};
}

Galaxy Galaxy::operator*= (const double &value)
{
	for(int i=0;i<10000;i++)
		this->stars[i]*=value; /* G486137661 */
	return {*this};
}

Galaxy Galaxy::operator/= (const Galaxy &right)
{
	for(int i=0;i<10000;i++)
		this->stars[i]/=right.stars[i]; /* G486137661 */
	return {*this};
}

Galaxy operator+ (const Galaxy &left,const Galaxy &right)
{
	Galaxy result{left};
	for(int i=0;i<10000;i++)
		result.stars[i]+=right.stars[i]; /* G487656913 */
	return result;
}

Galaxy operator+ (const Galaxy &left,const double &value)
{
	Galaxy result{left};
	for(int i=0;i<10000;i++)
		result.stars[i]+=value; /* G487656913 */
	return result;
}

Galaxy operator+ (const double &value,const Galaxy &right)
{
	Galaxy result{right};
	for(int i=0;i<10000;i++)
		result.stars[i]+=value; /* G487656913 */
	return result;
}

Galaxy operator- (const Galaxy &left,const Galaxy &right)
{
	Galaxy result{left};
	for(int i=0;i<10000;i++)
		result.stars[i]-=right.stars[i]; /* G487656913 */
	return result;
}

Galaxy operator* (const double &value,const Galaxy &right)
{
	Galaxy result{right};
	for(int i=0;i<10000;i++)
		result.stars[i]*=value; /* G487656913 */
	return result;
}

Galaxy operator* (const Galaxy &left,const Galaxy &right)
{
	Galaxy result{left};
	for(int i=0;i<10000;i++)
		result.stars[i]*=right.stars[i]; /* G487656913 */
	return result;
}

Galaxy operator/ (const Galaxy &left,const Galaxy &right)
{
	Galaxy result{left};
	for(int i=0;i<10000;i++)
		result.stars[i]/=right.stars[i]; /* G487656913 */
	return result;
}

